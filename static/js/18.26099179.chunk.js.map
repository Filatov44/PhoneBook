{"version":3,"file":"static/js/18.26099179.chunk.js","mappings":"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","sources":["redux/contacts-selector.js","components/Phonebook/Phonebook.styled.jsx","components/Phonebook/ContactForm/ContactForm.styled.jsx","components/Phonebook/ContactForm/ContactForm.jsx","components/Phonebook/Filter/Filter.styled.jsx","components/Phonebook/Filter/Filter.jsx","components/Phonebook/ContactList/ContactList.styled.jsx","components/Phonebook/ContactList/ContactList.jsx","components/Phonebook/Message/Message.style.jsx","components/Phonebook/Message/Message.jsx","components/Phonebook/Phonebook.jsx","pages/ContactPage/ContactPage.style.jsx","pages/ContactPage/ContactPage.jsx"],"sourcesContent":["export const getContacts = state => state.contacts.items;\nexport const getFilter = state => state.filter;\nexport const getState = ({ contacts }) => ({\n  loading: contacts.loading,\n  error: contacts.error,\n});\n","import styled from 'styled-components';\n\nexport const StyledPhonebookContainer = styled.div`\n  p,\n  h1,\n  /* h2, */\n  h3,\n  h4,\n  h5,\n  h6 {\n    margin: 0px;\n  }\n\n  ul {\n    list-style: none;\n  }\n\n  img {\n    display: block;\n    width: 100%;\n    height: auto;\n  }\n\n  display: flex;\n`;\nexport const StyledPhonebookTitle = styled.h1`\n  font-size: 28px;\n  padding: 15px 0px;\n  margin-bottom: 30px;\n  text-align: center;\n  margin-top: 0;\n  margin-bottom: 20px;\n`;\nexport const StyledTitleContactAd = styled.h2`\n  font-size: 24px;\n  color: blue;\n  text-align: center;\n  margin-bottom: 50px;\n`;\n\nexport const StyledTitleContact = styled.h2`\n  font-size: 24px;\n  color: blue;\n  text-align: center;\n  margin-bottom: 25px;\n`;\n\nexport const StyledPhonebookWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const StyledDivContacts = styled.div`\n  flex-grow: 4;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: 15px 15px 15px 40px;\n`;\n\nexport const StyledDivAddContact = styled.div`\n  flex-grow: 1;\n  padding: 15px;\n  border-right: 1px solid blue;\n`;\n","import styled from \"styled-components\";\n\nexport const StyledContactForm = styled.form`\n    display: flex;\n    flex-direction: column;\n    gap: 15px;\n`;\n\nexport const StyledLabel = styled.label`\n    font-size: 20px;\n    color: blue;\n`;\n\nexport const StyledInput = styled.input`\n  font-size: 20px;\n  padding: 10px;\n  max-width: 400px;\n  margin: auto;\n  box-sizing: border-box;\n  border: 2px solid #ccc;\n  border-radius: 10px;\n  outline: none;\n  transition: width 0.4s ease-in-out, border 0.4s ease-in-out;\n \n\n  :focus {\n    width: 100%;\n    border: 2px solid blue;\n  }\n`;\n\nexport const StyledButtonAddContact = styled.button`\n  width: 100px;\n  padding: 5px 5px;\n  margin-top: 30px;\n  margin-bottom: 30px;\n  margin-left: auto;\n  margin-right: auto;\n  color: #ffffff;\n  background-color: rgb(33, 149, 243);\n  font-family: inherit;\n  font-weight: 500;\n  font-size: 12px;\n  line-height: 1.88;\n  letter-spacing: 0.06em;\n  cursor: pointer;\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.15);\n  border: 1px solid transparent;\n  border-radius: 4px;\n  transition: background-color, box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  :focus {\n    background-color: blue;\n    box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.8);\n    scale: 1.1;\n  }\n  :hover {\n    background-color: blue;\n    box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.8);\n    scale: 1.1;\n  }\n`;","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n// import { addContact, getContacts } from 'redux/contacts-slice';\nimport { getContacts } from 'redux/contacts-selector';\nimport { addContact } from 'redux/contacts-operation';\n\nimport { nanoid } from 'nanoid';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport {\n  StyledContactForm,\n  StyledLabel,\n  StyledInput,\n  StyledButtonAddContact,\n} from 'components/Phonebook/ContactForm/ContactForm.styled';\n\nexport default function ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const nameId = nanoid();\n  const telId = nanoid();\n  // Получаем ссылку на функцию отправки экшенов\n  const dispatch = useDispatch();\n  // вытягиваем массив контактов из store\n  const contacts = useSelector(getContacts);\n\n  const resetForm = () => {\n    setName('');\n    setNumber('');\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const id = nanoid();\n    //Проверяем на дубликат\n    const isDuplicateName = contacts.find(\n      contact => contact.name.toLowerCase() === name.toLowerCase()\n    );\n\n    const isDuplicateNumber = contacts.find(\n      contact => contact.number.toLowerCase() === number.toLowerCase()\n    );\n\n    if (isDuplicateName) {\n      resetForm();\n      return toast.info(\n        `Контакт с именем ${name} уже находится в телефонной книге`\n      );\n    }\n\n    if (isDuplicateNumber) {\n      resetForm();\n      return toast.info(`${number} уже записан в телефонной книге`);\n    }\n\n    //отправляем экшен со значением фильтра в store\n    dispatch(addContact({ name, number, id }));\n    toast.success(`Контакт ${name} успешно добавлен в телефонную книгу`);\n    resetForm();\n  };\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  return (\n    <StyledContactForm onSubmit={handleSubmit}>\n      <StyledLabel htmlFor={nameId}>Name</StyledLabel>\n      <StyledInput\n        id={nameId}\n        onChange={handleChange}\n        value={name}\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n      />\n      <StyledLabel htmlFor={telId}>Number</StyledLabel>\n      <StyledInput\n        id={telId}\n        onChange={handleChange}\n        value={number}\n        type=\"tel\"\n        name=\"number\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n      />\n      <StyledButtonAddContact type=\"submit\">Add contact</StyledButtonAddContact>\n    </StyledContactForm>\n  );\n}\n\n\n","import styled from 'styled-components';\n\nexport const StyledSearchLabel = styled.label`\n  color: blue;\n  /* margin-top: 20px; */\n`;\nexport const StyledSearchInput = styled.input`\n  padding: 10px;\n  max-width: 400px;\n  margin: auto;\n  margin-bottom: 25px;\n  box-sizing: border-box;\n  border: 2px solid #ccc;\n  border-radius: 10px;\n  outline: none;\n  transition: width 0.4s ease-in-out, border 0.4s ease-in-out;\n\n  :focus {\n    width: 100%;\n    border: 2px solid blue;\n  }\n`;\nexport const StyledSearchWrapper = styled.div`\n  margin: auto;\n  max-width: 500px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  gap: 15px;\n`;\n","\nimport { useSelector, useDispatch } from 'react-redux';\nimport { changeFilter }  from 'redux/contacts-slice';\nimport { getFilter } from 'redux/contacts-selector';\nimport {\n  StyledSearchLabel,\n  StyledSearchInput,\n  StyledSearchWrapper,\n} from 'components/Phonebook/Filter/Filter.styled';\n\nfunction Filter() {\n  // вытягиваем значение фильтра из store\n  const filter = useSelector(getFilter);\n\n  // Получаем ссылку на функцию отправки экшенов\n  const dispatch = useDispatch();\n\n  const onChangeFilter = e => {\n    const value = e.currentTarget.value;\n    dispatch(changeFilter(value));\n  }\n\n  return (\n    <StyledSearchWrapper>\n      <StyledSearchLabel htmlFor=\"text\">\n        Find contacts by name\n      </StyledSearchLabel>\n      <StyledSearchInput\n        name=\"filter\"\n        type=\"text\"\n        value={filter}\n        onChange={onChangeFilter}\n      />\n    </StyledSearchWrapper>\n  );\n}\n\nexport default Filter;\n","import styled from 'styled-components';\n\nexport const StyledContactList = styled.ul`\n  /* max-width: 500px; */\n  /* margin: auto; */\n  /* display: flex; */\n  padding: 0;\n`;\n\nexport const StyledContactItem = styled.li`\n  font-size: 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 10px;\n  border: 1px dashed blue;\n  border-radius: 15px;\n  margin-bottom: 5px;\n  min-width: 300px;\n`;\n\nexport const StyledContactDel = styled.button`\n  font-size: 20px;\n  padding: 5px;\n  border: none;\n  color: red;\n  \n  background-color: inherit;\n  :focus {\n    scale: 1.2;\n  }\n  :hover {\n    scale: 1.2;\n  }\n`;\nexport const StyledContactIcon = styled.span`\n  color: blue;\n  margin-right: 30px;\n  padding: 5px;\n`;\n","\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getContacts, getFilter } from 'redux/contacts-selector';\nimport { fetchContacts, deleteContact } from 'redux/contacts-operation';\nimport { useEffect } from 'react';\nimport { FaTrash, FaUserAlt } from 'react-icons/fa';\nimport {\n  StyledContactList,\n  StyledContactItem,\n  StyledContactIcon,\n  StyledContactDel,\n} from 'components/Phonebook/ContactList/ContactList.styled';\n\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nexport default function ContactList() {\n  //вытягиваем из сторе значение фильтра\n  const filter = useSelector(getFilter);\n\n  // Получаем ссылку на функцию отправки экшенов\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  // вытягиваем массив контактов из store\n  const contacts = useSelector(getContacts);\n  // console.log(contacts);\n\n  const normalizetFilter = filter.toLowerCase();\n\n  // фильтруем контакты по фильтру\n  const filteredContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(normalizetFilter)\n  );\n\n  const elements = filteredContacts.map(({ id, name, number }) => {\n    return (\n      <StyledContactItem key={id}>\n        <StyledContactIcon>\n          <FaUserAlt />\n        </StyledContactIcon>\n        {name}: {number}\n        <StyledContactDel\n          onClick={() => {\n            dispatch(deleteContact(id));\n            toast.warn(`Контакт ${name} удален`);\n          }}\n        >\n          <FaTrash />\n        </StyledContactDel>{' '}\n      </StyledContactItem>\n    );\n  });\n  return (\n    <>\n      <StyledContactList>{elements}</StyledContactList>\n    </>\n  );\n}\n\nContactList.defaultProps = {\n  items: [],\n};\n\n\n","import styled from 'styled-components';\n\nexport const StyledMessage = styled.p`\n  font-size: 20px;\n  text-align: center;\n  color: red;\n`;\n","import PropTypes from 'prop-types';\nimport { StyledMessage } from 'components/Phonebook/Message/Message.style';\n\nfunction Message({ text }) {\n  return <StyledMessage>{text}</StyledMessage>;\n}\n\nMessage.prototype = {\n  text: PropTypes.string.isRequired,\n};\n\nexport default Message;\n","import React from 'react';\nimport { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts-operation';\n// import { nanoid } from 'nanoid';\nimport { useSelector } from 'react-redux';\nimport { getContacts } from 'redux/contacts-selector';\nimport { ToastContainer } from 'react-toastify';\nimport {Zoom} from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport {\n  StyledPhonebookContainer,\n  StyledPhonebookTitle,\n  StyledTitleContact,\n  StyledPhonebookWrapper,\n  StyledDivAddContact,\n  StyledDivContacts,\n  StyledTitleContactAd,\n} from 'components/Phonebook/Phonebook.styled';\n\nimport ContactForm from './ContactForm/ContactForm';\nimport Filter from './Filter/Filter';\nimport ContactList from './ContactList/ContactList';\nimport Message from './Message/Message';\n\nimport { getState } from 'redux/contacts-selector';\n\n// const emptyContactsList = [];\n\nexport default function Phonebook() {\n  const { loading, error } = useSelector(getState);\n  const contacts = useSelector(getContacts);\n  // console.log(contacts);\n  // const length = contacts.length;\n\n  const dispatch = useDispatch();\n  \n useEffect(() => {\n   dispatch(fetchContacts());\n }, [dispatch]);\n\n  return (\n    <>\n      <ToastContainer\n        position=\"top-center\"\n        autoClose={2000}\n        transition={Zoom}\n        hideProgressBar={false}\n        newestOnTop={false}\n        closeOnClick\n        rtl={false}\n        pauseOnFocusLoss\n        draggable\n        pauseOnHover\n      />\n      <StyledPhonebookWrapper>\n        <StyledPhonebookTitle>My PhoneBook</StyledPhonebookTitle>\n\n        <StyledPhonebookContainer>\n          <StyledDivAddContact>\n            <StyledTitleContactAd>Add new contact</StyledTitleContactAd>\n            <ContactForm />\n          </StyledDivAddContact>\n          <StyledDivContacts>\n            <StyledTitleContact>Contacts</StyledTitleContact>\n\n            <Filter />\n            {!loading && contacts.length > 0 ? (\n              <ContactList />\n            ) : (\n              <Message text=\"Contact list is empty\" />\n            )}\n            {error && <p>sory, something went wrong</p>}\n          </StyledDivContacts>\n        </StyledPhonebookContainer>\n      </StyledPhonebookWrapper>\n    </>\n  );\n}\n","//\n\nimport styled from 'styled-components';\nexport const StyledContactsContainer = styled.div`\n  background-image: url('https://image.winudf.com/v2/image/Y29tLlBSSVNTSS5XYWxscGFwZXIuQmFja2dyb3VuZC5XaGl0ZUJhY2tncm91bmRXYWxscGFwZXJfc2NyZWVuXzBfMTUyODUwODAxNF8wNjk/screen-0.jpg?fakeurl=1&type=.webp');\n  background-size: cover;\n  height: 100%;\n  padding: 0;\n`;\n","import Phonebook from 'components/Phonebook/Phonebook';\nimport { StyledContactsContainer } from './ContactPage.style';\n\nexport default function ContactPage() {\n  return (\n    <StyledContactsContainer>\n      <Phonebook />\n    </StyledContactsContainer>\n  );\n}\n"],"names":["getContacts","state","contacts","items","getFilter","filter","getState","loading","error","StyledPhonebookContainer","styled","StyledPhonebookTitle","StyledTitleContactAd","StyledTitleContact","StyledPhonebookWrapper","StyledDivContacts","StyledDivAddContact","StyledContactForm","StyledLabel","StyledInput","StyledButtonAddContact","ContactForm","useState","name","setName","number","setNumber","nameId","nanoid","telId","dispatch","useDispatch","useSelector","resetForm","handleChange","e","target","value","onSubmit","preventDefault","id","isDuplicateName","find","contact","toLowerCase","isDuplicateNumber","toast","addContact","htmlFor","onChange","type","pattern","title","required","StyledSearchLabel","StyledSearchInput","StyledSearchWrapper","currentTarget","changeFilter","StyledContactList","StyledContactItem","StyledContactDel","StyledContactIcon","ContactList","useEffect","fetchContacts","normalizetFilter","elements","includes","map","onClick","deleteContact","defaultProps","StyledMessage","Message","text","prototype","PropTypes","Phonebook","position","autoClose","transition","Zoom","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","length","StyledContactsContainer","ContactPage"],"sourceRoot":""}